{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\nimport { Link } from 'react-router-dom';\nimport { FaComment, FaTrash, FaThumbsUp } from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      meta: {},\n      hidden: true,\n      reply_hidden: true,\n      reply: \"\",\n      likes: [],\n      liked: null\n    };\n\n    this.show = () => {\n      this.setState({\n        hidden: !this.state.hidden\n      });\n    };\n\n    this.showReply = e => {\n      this.setState({\n        reply_hidden: !this.state.reply_hidden\n      });\n    };\n\n    this.submitReply = id => {\n      this.props.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.reply, id, this.props.user.id).then(this.showReply);\n    };\n\n    this.handleLikes = e => {\n      e.preventDefault();\n\n      if (!this.state.liked) {\n        this.likePost(this.props.comment.id, this.props.user.id);\n      } else {\n        this.unlikePost(this.props.comment.id, this.props.user.id);\n      }\n    };\n  }\n\n  parseDate(timestamp) {\n    var t = timestamp.split(/[-:T]/);\n    var d = new Date(Date.UTC(t[0], t[1] - 1, t[2], t[3], t[4]));\n    return d.toString().slice(4, 21);\n  }\n\n  deletePost(id) {\n    let body = JSON.stringify({\n      id\n    });\n    fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n      headers,\n      body,\n      method: \"DELETE\"\n    }).then(res => {\n      return res.json();\n    }).then(() => this.props.fetchPosts()).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  getLikes(post) {\n    fetch(\"/api/likes/\".concat(post), {\n      headers,\n      method: \"GET\"\n    }).then(res => {\n      return res.json();\n    }).then(json => {\n      this.setState({\n        likes: json['likes']\n      });\n      this.setState({\n        liked: json['liked']\n      });\n    }).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  likePost(post, user_id) {\n    let body = JSON.stringify({\n      post,\n      user_id\n    });\n    fetch(\"/api/likes/\".concat(post), {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      return res.json();\n    }).then(() => this.getLikes(this.props.comment.id)).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  unlikePost(post, user_id) {\n    let body = JSON.stringify({\n      user_id\n    });\n    fetch(\"/api/likes/\".concat(post), {\n      headers,\n      body,\n      method: \"DELETE\"\n    }).then(res => {\n      return res.json();\n    }).then(() => this.getLikes(this.props.comment.id)).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  componentWillMount() {\n    this.getLikes(this.props.comment.id);\n  }\n\n  render() {\n    var comment = this.props.comment;\n    var meta = this.props.meta;\n    var match = this.props.match;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-avi\",\n      style: meta && meta[comment.user_id] ? {\n        backgroundImage: \"url(\".concat(meta[comment.user_id]['avi_path'], \")\")\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"post-timestamp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.parseDate(comment.timestamp)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \" \", meta && meta[comment.user_id] ? React.createElement(Link, {\n      to: \"/about/\".concat(meta[comment.user_id]['username']),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"@\", meta[comment.user_id]['username']) : null), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, comment.text), React.createElement(IconButton, {\n      onClick: this.handleLikes.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(FaThumbsUp, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.likes.length, \" likes \"), React.createElement(IconButton, {\n      onClick: this.showReply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(FaComment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      onClick: e => {\n        e.preventDefault();\n        this.deletePost(comment.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(FaTrash, {\n      className: this.props.user.id !== comment.user_id ? \"hidden\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(TextareaAutosize, {\n      className: this.state.reply_hidden ? \"hidden\" : \"\",\n      id: \"new-post\",\n      onChange: e => this.setState({\n        reply: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      onClick: e => this.submitReply(comment.id),\n      className: this.state.reply_hidden ? \"hidden\" : \"reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Reply\"), React.createElement(\"p\", {\n      className: \"view-replies\",\n      onClick: this.show,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, comment.replies ? \"View \" + comment.replies.length + \" replies\" : \"\"))), React.createElement(\"div\", {\n      className: this.state.hidden ? \"hidden\" : \"replies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Comments, {\n      fetchPosts: this.props.fetchPosts,\n      newPost: this.props.newPost,\n      match: match,\n      meta: meta,\n      comments: comment.replies ? comment.replies : [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js"],"names":["React","Component","connect","Comments","TextareaAutosize","headers","Link","FaComment","FaTrash","FaThumbsUp","IconButton","Comment","state","meta","hidden","reply_hidden","reply","likes","liked","show","setState","showReply","e","submitReply","id","props","newPost","match","params","topic_id","category_id","user","then","handleLikes","preventDefault","likePost","comment","unlikePost","parseDate","timestamp","t","split","d","Date","UTC","toString","slice","deletePost","body","JSON","stringify","fetch","method","res","json","fetchPosts","catch","err","console","log","getLikes","post","user_id","componentWillMount","render","backgroundImage","text","bind","length","target","value","replies","mapStateToProps","auth","token"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\nimport {Link} from 'react-router-dom';\nimport {FaComment,FaTrash,FaThumbsUp} from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nclass Comment extends Component{\n\n  state = {\n    meta:{},\n    hidden:true,\n    reply_hidden:true,\n    reply:\"\",\n    likes:[],\n    liked:null,\n  }\n\n  parseDate(timestamp){\n    var t = timestamp.split(/[-:T]/)\n    var d = new Date(Date.UTC(t[0],t[1]-1,t[2],t[3],t[4]));\n    return d.toString().slice(4,21)\n  }\n\n  show = () =>{\n    this.setState({hidden:!this.state.hidden})\n  }\n  showReply = (e) =>{\n    this.setState({reply_hidden:!this.state.reply_hidden})\n  }\n\n  submitReply =(id) =>{\n    this.props.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,\n      this.state.reply,id,this.props.user.id).then(this.showReply)\n  }\n\n  deletePost(id){\n    let body = JSON.stringify({id});\n    fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"DELETE\"})\n    .then(res => {return res.json();}).then(()=>this.props.fetchPosts())\n    .catch(err => {console.log(\"fetch error\" + err)})\n  }\n\n  getLikes(post){\n    fetch(`/api/likes/${post}`, {headers,method:\"GET\"})\n    .then(res => {return res.json();})\n    .then(json=>{this.setState({likes:json['likes']}); this.setState({liked:json['liked']})})\n    .catch(err => {console.log(\"fetch error\" + err)})\n  }\n\n  likePost(post,user_id){\n    let body = JSON.stringify({post,user_id});\n    fetch(`/api/likes/${post}`, {headers,body,method:\"POST\"})\n    .then(res => {return res.json();}).then(()=>this.getLikes(this.props.comment.id))\n    .catch(err => {console.log(\"fetch error\" + err)})\n  }\n\n  unlikePost(post,user_id){\n    let body = JSON.stringify({user_id});\n    fetch(`/api/likes/${post}`, {headers,body,method:\"DELETE\"})\n    .then(res => {return res.json();}).then(()=>this.getLikes(this.props.comment.id))\n    .catch(err => {console.log(\"fetch error\" + err)})\n  }\n\n  handleLikes=(e)=>{\n    e.preventDefault();\n    if(!this.state.liked){\n      this.likePost(this.props.comment.id, this.props.user.id)\n    }else{\n      this.unlikePost(this.props.comment.id, this.props.user.id)\n    }\n  }\n\n  componentWillMount(){\n    this.getLikes(this.props.comment.id);\n\n  }\n\n  render(){\n     var comment = this.props.comment;\n     var meta = this.props.meta;\n     var match = this.props.match;\n    return(\n      <div>\n        <div className=\"post\" >\n          <div className=\"post-avi\" style = {meta&&meta[comment.user_id] ? {backgroundImage: `url(${meta[comment.user_id]['avi_path']})`} : {}}></div>\n          <div className=\"text\">\n          <p className=\"post-timestamp\">{this.parseDate(comment.timestamp)}</p>\n\n            <p> {meta&&meta[comment.user_id] ? <Link to={`/about/${meta[comment.user_id]['username']}`}>@{meta[comment.user_id]['username']}</Link>:null}</p>\n            <p>{comment.text}</p>\n            <IconButton onClick={this.handleLikes.bind(this)}><FaThumbsUp/></IconButton>\n            <span>{this.state.likes.length} likes </span>\n            <IconButton onClick={this.showReply}><FaComment/></IconButton>\n            <IconButton onClick={e=>{e.preventDefault();this.deletePost(comment.id)}}>\n              <FaTrash className={this.props.user.id !== comment.user_id ? \"hidden\" : \"\"}/>\n            </IconButton>\n            <TextareaAutosize  className={this.state.reply_hidden ? \"hidden\" : \"\"}id=\"new-post\" onChange={e => this.setState({reply: e.target.value})}\n             maxLength=\"500\" minRows={1} maxRows={6}\n             placeholder=\"Reply\"/>\n            <p onClick={e =>this.submitReply(comment.id)} className={this.state.reply_hidden ? \"hidden\" : \"reply\"}>Reply</p>\n            <p className=\"view-replies\" onClick={this.show}>{comment.replies ? \"View \"+comment.replies.length + \" replies\" : \"\"}</p>\n          </div>\n        </div>\n        <div className={this.state.hidden ? \"hidden\" : \"replies\"}>\n          <Comments fetchPosts={this.props.fetchPosts} newPost={this.props.newPost} match={match}\n          meta={meta} comments={comment.replies ? comment.replies : []} />\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        user: state.auth.user,\n        token: state.auth.token,\n    }\n}\n\n\nexport default connect(mapStateToProps)(Comment);\n"]},"metadata":{},"sourceType":"module"}