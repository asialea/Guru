{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\nimport Comments from './Comments';\n\nclass Topic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      topic: \"\",\n      meta: null,\n      avi: null\n    };\n\n    this.newPost = (topic, category, text, reply_to, user_id) => {\n      let body = JSON.stringify({\n        topic,\n        category,\n        text,\n        reply_to,\n        user_id\n      });\n      headers[\"Authorization\"] = \"Token \".concat(this.props.token);\n      return fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n        headers,\n        body,\n        method: \"POST\"\n      }).then(res => {\n        return res.json();\n      }).then(() => this.fetchPosts()).catch(err => {\n        console.log(\"fetch error\" + err);\n      });\n    };\n\n    this.submitPost = e => {\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.post, null, this.props.user.id);\n    };\n\n    this.hello = () => {\n      console.log(hi);\n    };\n  }\n\n  fetchPosts() {\n    headers[\"Authorization\"] = \"Token \".concat(this.props.token);\n    fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n      headers,\n      method: \"GET\"\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      return responseData;\n    }).then(json => {\n      this.setState({\n        posts: json.data\n      });\n      this.setState({\n        topic: json.topic\n      });\n      this.setState({\n        meta: json.meta\n      });\n      this.setState({\n        avi: json.user_avi\n      });\n    }).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  componentWillMount() {\n    this.fetchPosts();\n  }\n\n  render() {\n    var avi = this.state.avi;\n    return React.createElement(\"div\", {\n      id: \"topic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      history: this.props.history,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"flex-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"forum-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"post-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"forum-h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.state.topic), React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-avi\",\n      style: avi ? {\n        backgroundImage: \"url(\".concat(avi, \")\")\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(TextareaAutosize, {\n      id: \"new-post\",\n      onChange: e => this.setState({\n        post: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Create a post...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.submitPost,\n      className: \"post-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Post\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Comments, {\n      hi: this.props.hi,\n      match: this.props.match,\n      comments: this.state.posts,\n      meta: this.state.meta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Topic);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js"],"names":["React","Component","connect","Navbar","TextareaAutosize","headers","Comments","Topic","state","posts","topic","meta","avi","newPost","category","text","reply_to","user_id","body","JSON","stringify","props","token","fetch","match","params","topic_id","method","then","res","json","fetchPosts","catch","err","console","log","submitPost","e","preventDefault","category_id","post","user","id","hello","hi","response","responseData","setState","data","user_avi","componentWillMount","render","history","backgroundImage","target","value","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\nimport Comments from './Comments';\n\n\nclass Topic extends Component{\n\n    state = {\n      posts:[],\n      topic:\"\",\n      meta:null,\n      avi:null,\n    }\n\n    fetchPosts(){\n      headers[\"Authorization\"] = `Token ${this.props.token}`;\n      fetch(`/api/post/${this.props.match.params.topic_id}/`,{headers,method:\"GET\"})\n        .then(response => { return response.json();}).then(responseData => {return responseData;})\n        .then (json => {this.setState({posts: json.data}); this.setState({topic:json.topic});\n        this.setState({meta:json.meta}); this.setState({avi:json.user_avi});})\n        .catch(err => {console.log(\"fetch error\" + err);\n         });\n    }\n\n    newPost = (topic,category,text,reply_to,user_id)=>{\n      let body = JSON.stringify({topic,category,text,reply_to,user_id});\n      headers[\"Authorization\"] = `Token ${this.props.token}`;\n      return fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"POST\"})\n        .then(res => {return res.json();}).then(()=>this.fetchPosts())\n        .catch(err => {console.log(\"fetch error\" + err)})\n    }\n\n    submitPost = (e) =>{\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,this.state.post,null,this.props.user.id)\n    }\n\n    componentWillMount(){\n      this.fetchPosts()\n    }\n\n  hello = ()=>{\n    console.log(hi)\n  }\n\n  render(){\n    var avi = this.state.avi;\n    return(\n    <div id=\"topic\">\n      <header>\n        <Navbar history={this.props.history}/>\n      </header>\n      <div className=\"flex-box\">\n        <div className=\"forum-body\">\n            <div id=\"post-list\">\n              <h1 className=\"forum-h1\">{this.state.topic}</h1>\n              <div className=\"post\">\n              <div className=\"post-avi\" style = {avi ? {backgroundImage: `url(${avi})`} : {}}></div>\n              <div className=\"text\">\n                <TextareaAutosize id=\"new-post\" onChange={e => this.setState({post: e.target.value})} maxLength=\"500\" minRows={1} maxRows={6}\n                 placeholder=\"Create a post...\"/>\n                <button onClick={this.submitPost} className=\"post-submit\">Post</button>\n              </div>\n              </div>\n              <div>\n              <Comments hi={this.props.hi} match={this.props.match} comments={this.state.posts} meta={this.state.meta} />\n              </div>\n            </div>\n\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      user: state.auth.user,\n      token:state.auth.token,\n    }\n}\n\nexport default connect(mapStateToProps)(Topic);\n"]},"metadata":{},"sourceType":"module"}