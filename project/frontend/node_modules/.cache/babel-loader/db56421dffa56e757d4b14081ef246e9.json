{"ast":null,"code":"export const updateAboutUser = (location, github, linkedin, twitter_handle, bio, csrftoken) => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'USER_LOADING'\n    });\n    const token = getState().auth.token;\n    let body = JSON.stringify({\n      location,\n      github,\n      linkedin,\n      twitter_handle,\n      bio\n    });\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"/api/aboutUser/\", {\n      headers,\n      body,\n      method: \"PUT\",\n      mode: \"same-origin\"\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch({\n          type: 'UPDATE_SUCCESSFUL',\n          aboutUser: res.data\n        });\n        return res.data;\n      } else if (res.status >= 400 && res.status < 500) {\n        dispatch({\n          type: \"UPDATE_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const fetchAboutUser = () => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"/api/aboutUser/\", {\n      headers,\n      method: \"GET\"\n    }).then(res => {\n      return res.json();\n    }).then(about_user => {\n      return dispatch({\n        type: 'FETCH_ABOUTUSER',\n        about_user\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/actions/aboutUser.js"],"names":["updateAboutUser","location","github","linkedin","twitter_handle","bio","csrftoken","dispatch","getState","type","token","auth","body","JSON","stringify","headers","fetch","method","mode","then","res","status","json","data","console","log","aboutUser","fetchAboutUser","about_user"],"mappings":"AACA,OAAO,MAAMA,eAAe,GAAG,CAACC,QAAD,EAAUC,MAAV,EAAiBC,QAAjB,EAA0BC,cAA1B,EAAyCC,GAAzC,EAA6CC,SAA7C,KAA2D;AACxF,SAAM,CAACC,QAAD,EAAUC,QAAV,KAAuB;AAC3BD,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,UAAMC,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;AACA,QAAIE,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACb,MAAAA,QAAD;AAAUC,MAAAA,MAAV;AAAiBC,MAAAA,QAAjB;AAA0BC,MAAAA,cAA1B;AAAyCC,MAAAA;AAAzC,KAAf,CAAX;AACA,QAAIU,OAAO,GAAG;AACZ,gBAAU,kBADE;AAEZ,sBAAgB;AAFJ,KAAd;;AAKA,QAAIL,KAAJ,EAAW;AACTK,MAAAA,OAAO,CAAC,eAAD,CAAP,mBAAoCL,KAApC;AACD;;AAED,WAAOM,KAAK,CAAC,iBAAD,EAAoB;AAACD,MAAAA,OAAD;AAASH,MAAAA,IAAT;AAAcK,MAAAA,MAAM,EAAC,KAArB;AAA2BC,MAAAA,IAAI,EAAC;AAAhC,KAApB,CAAL,CACJC,IADI,CACCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,GAAa,GAAjB,EAAsB;AACpB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,IAAI,IAAI;AAC7B,iBAAO;AAACF,YAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,YAAAA;AAArB,WAAP;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,cAAML,GAAN;AACD;AACF,KAVI,EAWJD,IAXI,CAWCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBd,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,mBAAP;AAA4BiB,UAAAA,SAAS,EAAEN,GAAG,CAACG;AAA3C,SAAD,CAAR;AACA,eAAOH,GAAG,CAACG,IAAX;AACD,OAHD,MAGO,IAAIH,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACC,MAAJ,GAAa,GAAtC,EAA2C;AAChDd,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,cAAP;AAAuBc,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAjC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD;AACF,KAnBI,CAAP;AAqBD,GAlCD;AAmCD,CApCM;AAuCP,OAAO,MAAMI,cAAc,GAAG,MAAM;AAClC,SAAM,CAACpB,QAAD,EAAUC,QAAV,KAAuB;AAC3B,UAAME,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;AACA,QAAIK,OAAO,GAAG;AACZ,gBAAU,kBADE;AAEZ,sBAAgB;AAFJ,KAAd;;AAKA,QAAIL,KAAJ,EAAW;AACTK,MAAAA,OAAO,CAAC,eAAD,CAAP,mBAAoCL,KAApC;AACD;;AAED,WAAOM,KAAK,oBAAoB;AAACD,MAAAA,OAAD;AAASE,MAAAA,MAAM,EAAC;AAAhB,KAApB,CAAL,CACNE,IADM,CACDC,GAAG,IAAI;AAAE,aAAOA,GAAG,CAACE,IAAJ,EAAP;AAAmB,KAD3B,EAENH,IAFM,CAEDS,UAAU,IAAE;AAAC,aAAOrB,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,iBAAN;AAAwBmB,QAAAA;AAAxB,OAAD,CAAf;AAClB,KAHM,CAAP;AAID,GAfD;AAgBD,CAjBM","sourcesContent":["\nexport const updateAboutUser = (location,github,linkedin,twitter_handle,bio,csrftoken) => {\n  return(dispatch,getState) => {\n    dispatch({type: 'USER_LOADING'});\n    const token = getState().auth.token;\n    let body = JSON.stringify({location,github,linkedin,twitter_handle,bio});\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(\"/api/aboutUser/\", {headers,body,method:\"PUT\",mode:\"same-origin\"})\n      .then(res => {\n        if (res.status < 500) {\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'UPDATE_SUCCESSFUL', aboutUser: res.data });\n          return res.data;\n        } else if (res.status >= 400 && res.status < 500) {\n          dispatch({type: \"UPDATE_ERROR\", data: res.data});\n          throw res.data;\n        }\n      })\n\n  }\n}\n\n\nexport const fetchAboutUser = () => {\n  return(dispatch,getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n       };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(`/api/aboutUser/`, {headers,method:\"GET\"})\n    .then(res => { return res.json();})\n    .then(about_user=>{return dispatch({type:'FETCH_ABOUTUSER',about_user})\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}