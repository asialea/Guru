{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\nimport { Link } from 'react-router-dom';\nimport { FaComment, FaTrash } from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      meta: {},\n      hidden: true,\n      reply_hidden: true,\n      reply: \"\"\n    };\n\n    this.show = () => {\n      this.setState({\n        hidden: !this.state.hidden\n      });\n    };\n\n    this.showReply = e => {\n      this.setState({\n        reply_hidden: !this.state.reply_hidden\n      });\n    };\n\n    this.submitReply = id => {\n      this.props.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.reply, id, this.props.user.id).then(this.shoe);\n    };\n\n    this.deletePost = id => {\n      let body = JSON.stringify({\n        id\n      });\n      fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n        headers,\n        body,\n        method: \"DELETE\"\n      }).then(res => {\n        return res.json();\n      }).then(() => this.props.fetchPosts).catch(err => {\n        console.log(\"fetch error\" + err);\n      });\n    };\n  }\n\n  render() {\n    var comment = this.props.comment;\n    var meta = this.props.meta;\n    var match = this.props.match;\n    console.log(this.props.newPost);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-avi\",\n      style: meta ? {\n        backgroundImage: \"url(\".concat(meta[comment.user_id]['avi_path'], \")\")\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \" \", React.createElement(Link, {\n      to: \"/about/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"@\", meta ? meta[comment.user_id]['username'] : \"\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, comment.text), React.createElement(IconButton, {\n      onClick: this.showReply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(FaComment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      onClick: e => this.deletePost(comment.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(FaTrash, {\n      className: this.props.user.id !== comment.user_id ? \"hidden\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(TextareaAutosize, {\n      className: this.state.reply_hidden ? \"hidden\" : \"\",\n      id: \"new-post\",\n      onChange: e => this.setState({\n        reply: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      onClick: e => this.submitReply(comment.id),\n      className: this.state.reply_hidden ? \"hidden\" : \"reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Reply\"), React.createElement(\"p\", {\n      className: \"view-replies\",\n      onClick: this.show,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, comment.replies ? \"View \" + comment.replies.length + \" replies\" : \"\"))), React.createElement(\"div\", {\n      className: this.state.hidden ? \"hidden\" : \"replies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Comments, {\n      match: match,\n      meta: meta,\n      comments: comment.replies ? comment.replies : [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js"],"names":["React","Component","connect","Comments","TextareaAutosize","headers","Link","FaComment","FaTrash","IconButton","Comment","state","meta","hidden","reply_hidden","reply","show","setState","showReply","e","submitReply","id","props","newPost","match","params","topic_id","category_id","user","then","shoe","deletePost","body","JSON","stringify","fetch","method","res","json","fetchPosts","catch","err","console","log","render","comment","backgroundImage","user_id","text","target","value","replies","length","mapStateToProps","auth","token"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAO,oBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,qBAAP;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,SAAR,EAAkBC,OAAlB,QAAgC,gBAAhC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAGA,MAAMC,OAAN,SAAsBT,SAAtB,CAA+B;AAAA;AAAA;AAAA,SAE7BU,KAF6B,GAErB;AACNC,MAAAA,IAAI,EAAC,EADC;AAENC,MAAAA,MAAM,EAAC,IAFD;AAGNC,MAAAA,YAAY,EAAC,IAHP;AAINC,MAAAA,KAAK,EAAC;AAJA,KAFqB;;AAAA,SAS7BC,IAT6B,GAStB,MAAK;AACV,WAAKC,QAAL,CAAc;AAACJ,QAAAA,MAAM,EAAC,CAAC,KAAKF,KAAL,CAAWE;AAApB,OAAd;AACD,KAX4B;;AAAA,SAY7BK,SAZ6B,GAYhBC,CAAD,IAAM;AAChB,WAAKF,QAAL,CAAc;AAACH,QAAAA,YAAY,EAAC,CAAC,KAAKH,KAAL,CAAWG;AAA1B,OAAd;AACD,KAd4B;;AAAA,SAgB7BM,WAhB6B,GAgBfC,EAAD,IAAO;AAClB,WAAKC,KAAL,CAAWC,OAAX,CAAmB,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,QAA3C,EAAoD,KAAKJ,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBE,WAA5E,EACE,KAAKhB,KAAL,CAAWI,KADb,EACmBM,EADnB,EACsB,KAAKC,KAAL,CAAWM,IAAX,CAAgBP,EADtC,EAC0CQ,IAD1C,CAC+C,KAAKC,IADpD;AAED,KAnB4B;;AAAA,SAsB7BC,UAtB6B,GAsBfV,EAAD,IAAQ;AACnB,UAAIW,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACb,QAAAA;AAAD,OAAf,CAAX;AACAc,MAAAA,KAAK,qBAAc,KAAKb,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,QAAtC,QAAmD;AAACrB,QAAAA,OAAD;AAAS2B,QAAAA,IAAT;AAAcI,QAAAA,MAAM,EAAC;AAArB,OAAnD,CAAL,CACCP,IADD,CACMQ,GAAG,IAAI;AAAC,eAAOA,GAAG,CAACC,IAAJ,EAAP;AAAmB,OADjC,EACmCT,IADnC,CACwC,MAAI,KAAKP,KAAL,CAAWiB,UADvD,EAECC,KAFD,CAEOC,GAAG,IAAI;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,GAA5B;AAAiC,OAFhD;AAGD,KA3B4B;AAAA;;AA8B7BG,EAAAA,MAAM,GAAE;AACL,QAAIC,OAAO,GAAG,KAAKvB,KAAL,CAAWuB,OAAzB;AACA,QAAIjC,IAAI,GAAG,KAAKU,KAAL,CAAWV,IAAtB;AACA,QAAIY,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAL,CAAWC,OAAvB;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAIX,IAAI,GAAG;AAACkC,QAAAA,eAAe,gBAASlC,IAAI,CAACiC,OAAO,CAACE,OAAT,CAAJ,CAAsB,UAAtB,CAAT;AAAhB,OAAH,GAAoE,EAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAuBnC,IAAI,GAAGA,IAAI,CAACiC,OAAO,CAACE,OAAT,CAAJ,CAAsB,UAAtB,CAAH,GAAqC,EAAhE,CAAJ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,OAAO,CAACG,IAAZ,CAFF,EAGE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,KAAK9B,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArC,CAHF,EAIE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAEC,CAAC,IAAE,KAAKY,UAAL,CAAgBc,OAAO,CAACxB,EAAxB,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,KAAKC,KAAL,CAAWM,IAAX,CAAgBP,EAAhB,KAAuBwB,OAAO,CAACE,OAA/B,GAAyC,QAAzC,GAAoD,EAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,EAOE,oBAAC,gBAAD;AAAmB,MAAA,SAAS,EAAE,KAAKpC,KAAL,CAAWG,YAAX,GAA0B,QAA1B,GAAqC,EAAnE;AAAsE,MAAA,EAAE,EAAC,UAAzE;AAAoF,MAAA,QAAQ,EAAEK,CAAC,IAAI,KAAKF,QAAL,CAAc;AAACF,QAAAA,KAAK,EAAEI,CAAC,CAAC8B,MAAF,CAASC;AAAjB,OAAd,CAAnG;AACC,MAAA,SAAS,EAAC,KADX;AACiB,MAAA,OAAO,EAAE,CAD1B;AAC6B,MAAA,OAAO,EAAE,CADtC;AAEC,MAAA,WAAW,EAAC,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAUE;AAAG,MAAA,OAAO,EAAE/B,CAAC,IAAG,KAAKC,WAAL,CAAiByB,OAAO,CAACxB,EAAzB,CAAhB;AAA8C,MAAA,SAAS,EAAE,KAAKV,KAAL,CAAWG,YAAX,GAA0B,QAA1B,GAAqC,OAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVF,EAWE;AAAG,MAAA,SAAS,EAAC,cAAb;AAA4B,MAAA,OAAO,EAAE,KAAKE,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiD6B,OAAO,CAACM,OAAR,GAAkB,UAAQN,OAAO,CAACM,OAAR,CAAgBC,MAAxB,GAAiC,UAAnD,GAAgE,EAAjH,CAXF,CAFF,CADF,EAiBE;AAAK,MAAA,SAAS,EAAE,KAAKzC,KAAL,CAAWE,MAAX,GAAoB,QAApB,GAA+B,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEW,KAAjB;AAAwB,MAAA,IAAI,EAAEZ,IAA9B;AAAoC,MAAA,QAAQ,EAAEiC,OAAO,CAACM,OAAR,GAAkBN,OAAO,CAACM,OAA1B,GAAoC,EAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjBF,CADF;AAwBD;;AA3D4B;;AA+D/B,MAAME,eAAe,GAAG1C,KAAK,IAAI;AAC7B,SAAO;AACHiB,IAAAA,IAAI,EAAEjB,KAAK,CAAC2C,IAAN,CAAW1B,IADd;AAEH2B,IAAAA,KAAK,EAAE5C,KAAK,CAAC2C,IAAN,CAAWC;AAFf,GAAP;AAIH,CALD;;AAQA,eAAerD,OAAO,CAACmD,eAAD,CAAP,CAAyB3C,OAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\nimport {Link} from 'react-router-dom';\nimport {FaComment,FaTrash} from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nclass Comment extends Component{\n\n  state = {\n    meta:{},\n    hidden:true,\n    reply_hidden:true,\n    reply:\"\",\n  }\n\n  show = () =>{\n    this.setState({hidden:!this.state.hidden})\n  }\n  showReply = (e) =>{\n    this.setState({reply_hidden:!this.state.reply_hidden})\n  }\n\n  submitReply =(id) =>{\n    this.props.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,\n      this.state.reply,id,this.props.user.id).then(this.shoe)\n  }\n\n\n  deletePost = (id) => {\n    let body = JSON.stringify({id});\n    fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"DELETE\"})\n    .then(res => {return res.json();}).then(()=>this.props.fetchPosts)\n    .catch(err => {console.log(\"fetch error\" + err)})\n  }\n\n\n  render(){\n     var comment = this.props.comment;\n     var meta = this.props.meta;\n     var match = this.props.match;\n     console.log(this.props.newPost)\n    return(\n      <div>\n        <div className=\"post\" >\n          <div className=\"post-avi\" style = {meta ? {backgroundImage: `url(${meta[comment.user_id]['avi_path']})`} : {}}></div>\n          <div className=\"text\">\n            <p> <Link to={\"/about/\"}>@{meta ? meta[comment.user_id]['username']:\"\"}</Link></p>\n            <p>{comment.text}</p>\n            <IconButton onClick={this.showReply}><FaComment/></IconButton>\n            <IconButton onClick={e=>this.deletePost(comment.id)}>\n              <FaTrash className={this.props.user.id !== comment.user_id ? \"hidden\" : \"\"}/>\n            </IconButton>\n            <TextareaAutosize  className={this.state.reply_hidden ? \"hidden\" : \"\"}id=\"new-post\" onChange={e => this.setState({reply: e.target.value})}\n             maxLength=\"500\" minRows={1} maxRows={6}\n             placeholder=\"Reply\"/>\n            <p onClick={e =>this.submitReply(comment.id)} className={this.state.reply_hidden ? \"hidden\" : \"reply\"}>Reply</p>\n            <p className=\"view-replies\" onClick={this.show}>{comment.replies ? \"View \"+comment.replies.length + \" replies\" : \"\"}</p>\n          </div>\n        </div>\n        <div className={this.state.hidden ? \"hidden\" : \"replies\"}>\n          <Comments match={match} meta={meta} comments={comment.replies ? comment.replies : []} />\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        user: state.auth.user,\n        token: state.auth.token,\n    }\n}\n\n\nexport default connect(mapStateToProps)(Comment);\n"]},"metadata":{},"sourceType":"module"}