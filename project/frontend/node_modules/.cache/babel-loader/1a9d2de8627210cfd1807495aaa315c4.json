{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\nimport { Link } from 'react-router-dom';\nimport Comments from './Comments';\n\nclass Topic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      topic: \"\",\n      post: \"\",\n      reply: \"\",\n      meta: null\n    };\n\n    this.submitPost = e => {\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.post, null, this.props.user.id).then(this.fetchPosts());\n    };\n\n    this.submitReply = id => {\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.reply, id, this.props.user.id);\n    };\n  }\n\n  newPost(topic, category, text, reply_to, user_id) {\n    let body = JSON.stringify({\n      topic,\n      category,\n      text,\n      reply_to,\n      user_id\n    });\n    headers[\"Authorization\"] = \"Token \".concat(this.props.token);\n    return fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      return res.json();\n    }).then(json => console.log(json)).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  fetchPosts() {\n    fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\")).then(response => {\n      return response.json();\n    }).then(responseData => {\n      return responseData;\n    }).then(json => {\n      this.setState({\n        posts: json.data\n      });\n      this.setState({\n        topic: json.topic\n      });\n      this.setState({\n        meta: json.meta\n      });\n    }).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  componentWillMount() {\n    this.fetchPosts();\n  } // {this.state.posts.map((el,idx) => {\n  //       return <div className=\"post\" key={idx}>\n  //             <div className=\"post-avi\" style = {{backgroundImage: `url()`}}></div>\n  //             <div className=\"text\">\n  //               <p> <Link to={\"/about/\"}>@{}</Link></p>\n  //               <p>{el.text}</p>\n  //               <TextareaAutosize id=\"new-post\" onChange={e => this.setState({reply: e.target.value})} maxLength=\"500\" minRows={1} maxRows={6}\n  //                placeholder=\"Reply\"/>\n  //               <p onClick={e =>this.submitReply(el.id)} className=\"\">Reply</p>\n  //             </div>\n  //\n  //       </div>\n  //   })}\n\n\n  render() {\n    console.log(this.state.post);\n    return React.createElement(\"div\", {\n      id: \"topic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"flex-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"forum-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"post-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"forum-h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.topic), React.createElement(\"div\", {\n      className: \"new-post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(TextareaAutosize, {\n      id: \"new-post\",\n      onChange: e => this.setState({\n        post: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Create a post...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.submitPost,\n      className: \"post-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Post\"), \" \", React.createElement(\"button\", {\n      className: \"post-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Add Tag\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Comments, {\n      comments: this.state.posts,\n      meta: this.state.meta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Topic);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js"],"names":["React","Component","connect","Navbar","TextareaAutosize","headers","Link","Comments","Topic","state","posts","topic","post","reply","meta","submitPost","e","preventDefault","newPost","props","match","params","topic_id","category_id","user","id","then","fetchPosts","submitReply","category","text","reply_to","user_id","body","JSON","stringify","token","fetch","method","res","json","console","log","catch","err","response","responseData","setState","data","componentWillMount","render","target","value","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\nimport {Link} from 'react-router-dom';\nimport Comments from './Comments';\n\n\nclass Topic extends Component{\n\n    state = {\n      posts:[],\n      topic:\"\",\n      post:\"\",\n      reply:\"\",\n      meta:null,\n    }\n\n    submitPost = (e) =>{\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,this.state.post,null,this.props.user.id)\n      .then(this.fetchPosts())\n    }\n\n    submitReply =(id) =>{\n      this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,\n        this.state.reply,id,this.props.user.id)\n    }\n\n    newPost(topic,category,text,reply_to,user_id){\n      let body = JSON.stringify({topic,category,text,reply_to,user_id});\n      headers[\"Authorization\"] = `Token ${this.props.token}`;\n      return fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"POST\"}).then(res => {return res.json();})\n        .then(json => console.log(json))\n        .catch(err => {console.log(\"fetch error\" + err)})\n    }\n\n    fetchPosts(){\n      fetch(`/api/post/${this.props.match.params.topic_id}/`)\n        .then(response => { return response.json();}).then(responseData => {return responseData;})\n        .then (json => {this.setState({posts: json.data}); this.setState({topic:json.topic}); this.setState({meta:json.meta});})\n        .catch(err => {console.log(\"fetch error\" + err);\n         });\n    }\n\n\n    componentWillMount(){\n      this.fetchPosts()\n    }\n\n    // {this.state.posts.map((el,idx) => {\n    //       return <div className=\"post\" key={idx}>\n    //             <div className=\"post-avi\" style = {{backgroundImage: `url()`}}></div>\n    //             <div className=\"text\">\n    //               <p> <Link to={\"/about/\"}>@{}</Link></p>\n    //               <p>{el.text}</p>\n    //               <TextareaAutosize id=\"new-post\" onChange={e => this.setState({reply: e.target.value})} maxLength=\"500\" minRows={1} maxRows={6}\n    //                placeholder=\"Reply\"/>\n    //               <p onClick={e =>this.submitReply(el.id)} className=\"\">Reply</p>\n    //             </div>\n    //\n    //       </div>\n    //   })}\n\n\n  render(){\n    console.log(this.state.post)\n    return(\n    <div id=\"topic\">\n      <header>\n        <Navbar/>\n      </header>\n      <div className=\"flex-box\">\n        <div className=\"forum-body\">\n            <div id=\"post-list\">\n              <h1 className=\"forum-h1\">{this.state.topic}</h1>\n              <div className=\"new-post\">\n                <TextareaAutosize id=\"new-post\" onChange={e => this.setState({post: e.target.value})} maxLength=\"500\" minRows={1} maxRows={6}\n                 placeholder=\"Create a post...\"/>\n                <button onClick={this.submitPost} className=\"post-submit\">Post</button> <button className=\"post-submit\">Add Tag</button>\n              </div>\n              <div>\n                <Comments comments={this.state.posts} meta={this.state.meta} />\n              </div>\n            </div>\n\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      user: state.auth.user,\n      token:state.auth.token,\n    }\n}\n\nexport default connect(mapStateToProps)(Topic);\n"]},"metadata":{},"sourceType":"module"}