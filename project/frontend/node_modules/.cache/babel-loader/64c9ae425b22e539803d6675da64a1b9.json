{"ast":null,"code":"export const addEducation = (user_id, start, end, school, location, degree, csrftoken) => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let body = JSON.stringify({\n      user_id,\n      start,\n      end,\n      school,\n      location,\n      degree\n    });\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"api/education/\", {\n      headers,\n      body,\n      method: \"POST\",\n      mode: \"same-origin\"\n    }).then(res => {\n      console.log(csrftoken);\n\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 201) {\n        return dispatch({\n          type: 'ADD_EDUCATION',\n          note: res.data\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const fetchEducation = username => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"api/education/${username}/\", {\n      headers\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        return dispatch({\n          type: 'FETCH_EDUCATION',\n          education: res.data\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const deleteEducation = (id, csrftoken) => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken\n    };\n    let body = JSON.stringify({\n      id\n    });\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"api/education/\".concat(id, \"/\"), {\n      headers,\n      body,\n      method: \"DELETE\"\n    }).then(res => {\n      if (res.status === 204) {\n        return {\n          status: res.status,\n          data: {}\n        };\n      } else if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 204) {\n        return dispatch({\n          type: 'DELETE_EDUCATION',\n          id\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/actions/education.js"],"names":["addEducation","user_id","start","end","school","location","degree","csrftoken","dispatch","getState","token","auth","body","JSON","stringify","headers","fetch","method","mode","then","res","console","log","status","json","data","type","note","fetchEducation","username","education","deleteEducation","id"],"mappings":"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","sourcesContent":["\nexport const addEducation= (user_id,start,end,school,location,degree,csrftoken) => {\n  return(dispatch,getState) => {\n    const token = getState().auth.token;\n    let body = JSON.stringify({user_id,start,end,school,location,degree});\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken,\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(`api/education/`, {headers,body,method:\"POST\",mode:\"same-origin\"})\n    .then(res => { console.log(csrftoken);\n              if (res.status < 500) {\n                  return res.json().then(data => {\n                      return {status: res.status, data};\n                  })\n              } else {\n                  console.log(\"Server Error!\");\n                  throw res;\n              }\n          })\n          .then(res => {\n              if (res.status === 201) {\n                  return dispatch({type: 'ADD_EDUCATION', note: res.data});\n              } else if (res.status === 401 || res.status === 403) {\n                  dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n                  throw res.data;\n              }\n          })\n  }\n}\n\nexport const fetchEducation = (username) => {\n  return(dispatch,getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n       };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(\"api/education/${username}/\", {headers, })\n         .then(res => {\n             if (res.status < 500) {\n                 return res.json().then(data => {\n                     return {status: res.status, data};\n                 })\n             } else {\n                 console.log(\"Server Error!\");\n                 throw res;\n             }\n         })\n         .then(res => {\n             if (res.status === 200) {\n                 return dispatch({type: 'FETCH_EDUCATION', education: res.data});\n             } else if (res.status === 401 || res.status === 403) {\n                 dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n                 throw res.data;\n             }\n         })\n  }\n}\n\n\nexport const deleteEducation = (id,csrftoken) => {\n  return(dispatch,getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken,\n    };\n    let body = JSON.stringify({id});\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(`api/education/${id}/`, {headers,body,method:\"DELETE\"})\n    .then(res => {\n              if (res.status === 204) {\n                  return {status: res.status, data: {}};\n              } else if (res.status < 500) {\n                  return res.json().then(data => {\n                      return {status: res.status, data};\n                  })\n              } else {\n                  console.log(\"Server Error!\");\n                  throw res;\n              }\n          })\n          .then(res => {\n              if (res.status === 204) {\n                  return dispatch({type: 'DELETE_EDUCATION', id});\n              } else if (res.status === 401 || res.status === 403) {\n                  dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n                  throw res.data;\n              }\n          })\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}