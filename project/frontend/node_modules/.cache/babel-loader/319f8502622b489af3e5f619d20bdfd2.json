{"ast":null,"code":"export const loadUser = () => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: \"USER_LOADING\"\n    });\n    const token = getState().auth.token;\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"/auth/user/\", {\n      headers\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch({\n          type: 'USER_LOADED',\n          user: res.data\n        });\n        return res.data;\n      } else if (res.status >= 400 && res.status < 500) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const deleteUser = user => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let body = JSON.stringify({\n      user\n    });\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"/auth/user/\", {\n      headers,\n      body,\n      method: \"DELETE\"\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch({\n          type: 'LOGOUT_SUCCESSFUL'\n        });\n        return res.data;\n      } else if (res.status >= 400 && res.status < 500) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const updateUser = (user, csrftoken) => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'USER_LOADING'\n    });\n    const token = getState().auth.token;\n    let body = JSON.stringify({\n      user\n    });\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"/auth/update/\", {\n      headers,\n      body,\n      method: \"PATCH\",\n      mode: \"same-origin\"\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch({\n          type: 'UPDATE_SUCCESSFUL',\n          user: res.data\n        });\n        return res.data;\n      } else if (res.status >= 400 && res.status < 500) {\n        dispatch({\n          type: \"UPDATE_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const login = (username, password) => {\n  return (dispatch, getState) => {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    let body = JSON.stringify({\n      username,\n      password\n    });\n    return fetch(\"/auth/login/\", {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch({\n          type: 'LOGIN_SUCCESSFUL',\n          data: res.data\n        });\n        return res.data;\n      } else if (res.status === 403 || res.status === 401) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      } else {\n        dispatch({\n          type: \"LOGIN_FAILED\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const register = (username, email, first_name, last_name, password, type) => {\n  return (dispatch, getState) => {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    let body = JSON.stringify({\n      username,\n      email,\n      first_name,\n      last_name,\n      password,\n      type\n    });\n    return fetch(\"/auth/register/\", {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        dispatch({\n          type: 'REGISTRATION_SUCCESSFUL',\n          data: res.data\n        });\n        return res.data;\n      } else if (res.status === 403 || res.status === 401) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      } else {\n        dispatch({\n          type: \"REGISTRATION_FAILED\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const logout = () => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: \"USER_LOADING\"\n    });\n    const token = getState().auth.token;\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    ;\n    return fetch(\"/auth/logout/\", {\n      headers,\n      body: \"\",\n      method: \"POST\"\n    }).then(res => {\n      console.log(res.status);\n\n      if (res.status === 204) {\n        return {\n          status: res.status,\n          data: {}\n        };\n      } else if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 204) {\n        dispatch({\n          type: 'LOGOUT_SUCCESSFUL'\n        });\n        return res.data;\n      } else if (res.status === 403 || res.status === 401) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/actions/auth.js"],"names":["loadUser","dispatch","getState","type","token","auth","headers","fetch","then","res","status","json","data","console","log","user","deleteUser","body","JSON","stringify","method","updateUser","csrftoken","mode","login","username","password","register","email","first_name","last_name","logout"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,MAAM;AAC5B,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7BD,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AAEA,UAAMC,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;AAEA,QAAIE,OAAO,GAAG;AACZ,sBAAgB;AADJ,KAAd;;AAIA,QAAIF,KAAJ,EAAW;AACTE,MAAAA,OAAO,CAAC,eAAD,CAAP,mBAAoCF,KAApC;AACD;;AACD,WAAOG,KAAK,CAAC,aAAD,EAAgB;AAACD,MAAAA;AAAD,KAAhB,CAAL,CACJE,IADI,CACCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,GAAa,GAAjB,EAAsB;AACpB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,IAAI,IAAI;AAC7B,iBAAO;AAACF,YAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,YAAAA;AAArB,WAAP;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,cAAML,GAAN;AACD;AACF,KAVI,EAWJD,IAXI,CAWCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,aAAP;AAAsBY,UAAAA,IAAI,EAAEN,GAAG,CAACG;AAAhC,SAAD,CAAR;AACA,eAAOH,GAAG,CAACG,IAAX;AACD,OAHD,MAGO,IAAIH,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACC,MAAJ,GAAa,GAAtC,EAA2C;AAChDT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,sBAAP;AAA+BS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAzC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD;AACF,KAnBI,CAAP;AAoBD,GAhCD;AAiCD,CAlCM;AAoCP,OAAO,MAAMI,UAAU,GAAID,IAAD,IAAU;AAClC,SAAO,CAACd,QAAD,EAAWC,QAAX,KAAwB;AAC7B,UAAME,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;AACA,QAAIa,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACJ,MAAAA;AAAD,KAAf,CAAX;AACA,QAAIT,OAAO,GAAG;AACZ,sBAAgB;AADJ,KAAd;;AAIA,QAAIF,KAAJ,EAAW;AACTE,MAAAA,OAAO,CAAC,eAAD,CAAP,mBAAoCF,KAApC;AACD;;AACD,WAAOG,KAAK,CAAC,aAAD,EAAgB;AAACD,MAAAA,OAAD;AAASW,MAAAA,IAAT;AAAcG,MAAAA,MAAM,EAAC;AAArB,KAAhB,CAAL,CACJZ,IADI,CACCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,GAAa,GAAjB,EAAsB;AACpB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,IAAI,IAAI;AAC7B,iBAAO;AAACF,YAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,YAAAA;AAArB,WAAP;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,cAAML,GAAN;AACD;AACF,KAVI,EAWJD,IAXI,CAWCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAR;AACA,eAAOM,GAAG,CAACG,IAAX;AACD,OAHD,MAGO,IAAIH,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACC,MAAJ,GAAa,GAAtC,EAA2C;AAChDT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,sBAAP;AAA+BS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAzC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD;AACF,KAnBI,CAAP;AAoBD,GA9BD;AA+BD,CAhCM;AAkCP,OAAO,MAAMS,UAAU,GAAG,CAACN,IAAD,EAAMO,SAAN,KAAoB;AAC5C,SAAM,CAACrB,QAAD,EAAUC,QAAV,KAAuB;AAC3BD,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACA,UAAMC,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;AACA,QAAIa,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACJ,MAAAA;AAAD,KAAf,CAAX;AACA,QAAIT,OAAO,GAAG;AACZ,gBAAU,kBADE;AAEZ,sBAAgB,kBAFJ;AAGZ,qBAAegB;AAHH,KAAd;;AAMA,QAAIlB,KAAJ,EAAW;AACTE,MAAAA,OAAO,CAAC,eAAD,CAAP,mBAAoCF,KAApC;AACD;;AAED,WAAOG,KAAK,CAAC,eAAD,EAAkB;AAACD,MAAAA,OAAD;AAASW,MAAAA,IAAT;AAAcG,MAAAA,MAAM,EAAC,OAArB;AAA6BG,MAAAA,IAAI,EAAC;AAAlC,KAAlB,CAAL,CACJf,IADI,CACCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,GAAa,GAAjB,EAAsB;AACpB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,IAAI,IAAI;AAC7B,iBAAO;AAACF,YAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,YAAAA;AAArB,WAAP;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,cAAML,GAAN;AACD;AACF,KAVI,EAWJD,IAXI,CAWCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,mBAAP;AAA4BY,UAAAA,IAAI,EAAEN,GAAG,CAACG;AAAtC,SAAD,CAAR;AACA,eAAOH,GAAG,CAACG,IAAX;AACD,OAHD,MAGO,IAAIH,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACC,MAAJ,GAAa,GAAtC,EAA2C;AAChDT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,cAAP;AAAuBS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAjC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD;AACF,KAnBI,CAAP;AAqBD,GAnCD;AAoCD,CArCM;AAuCP,OAAO,MAAMY,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3C,SAAO,CAACzB,QAAD,EAAWC,QAAX,KAAwB;AAC7B,QAAII,OAAO,GAAG;AAAC,sBAAgB;AAAjB,KAAd;AACA,QAAIW,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACM,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAAf,CAAX;AAEA,WAAOnB,KAAK,CAAC,cAAD,EAAiB;AAACD,MAAAA,OAAD;AAAUW,MAAAA,IAAV;AAAgBG,MAAAA,MAAM,EAAE;AAAxB,KAAjB,CAAL,CACJZ,IADI,CACCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,GAAa,GAAjB,EAAsB;AACpB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,IAAI,IAAI;AAC7B,iBAAO;AAACF,YAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,YAAAA;AAArB,WAAP;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,cAAML,GAAN;AACD;AACF,KAVI,EAWJD,IAXI,CAWCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,kBAAP;AAA2BS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAArC,SAAD,CAAR;AACA,eAAOH,GAAG,CAACG,IAAX;AACD,OAHD,MAGO,IAAIH,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AACnDT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,sBAAP;AAA+BS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAzC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD,OAHM,MAGA;AACLX,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,cAAP;AAAuBS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAjC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD;AACF,KAtBI,CAAP;AAuBD,GA3BD;AA4BD,CA7BM;AAgCP,OAAO,MAAMe,QAAQ,GAAG,CAACF,QAAD,EAAUG,KAAV,EAAgBC,UAAhB,EAA2BC,SAA3B,EAAqCJ,QAArC,EAA8CvB,IAA9C,KAAuD;AAC7E,SAAO,CAACF,QAAD,EAAWC,QAAX,KAAwB;AAC7B,QAAII,OAAO,GAAG;AAAC,sBAAgB;AAAjB,KAAd;AACA,QAAIW,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACM,MAAAA,QAAD;AAAUG,MAAAA,KAAV;AAAgBC,MAAAA,UAAhB;AAA2BC,MAAAA,SAA3B;AAAqCJ,MAAAA,QAArC;AAA8CvB,MAAAA;AAA9C,KAAf,CAAX;AAEA,WAAOI,KAAK,CAAC,iBAAD,EAAoB;AAACD,MAAAA,OAAD;AAAUW,MAAAA,IAAV;AAAgBG,MAAAA,MAAM,EAAE;AAAxB,KAApB,CAAL,CACJZ,IADI,CACCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,GAAa,GAAjB,EAAsB;AACpB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,IAAI,IAAI;AAC7B,iBAAO;AAACF,YAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,YAAAA;AAArB,WAAP;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,cAAML,GAAN;AACD;AACF,KAVI,EAWJD,IAXI,CAWCC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,yBAAP;AAAkCS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAA5C,SAAD,CAAR;AACA,eAAOH,GAAG,CAACG,IAAX;AACD,OAHD,MAGO,IAAIH,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AACnDT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,sBAAP;AAA+BS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAzC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD,OAHM,MAGA;AACLX,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,qBAAP;AAA8BS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAxC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACD;AACF,KAtBI,CAAP;AAuBD,GA3BD;AA4BD,CA7BM;AA+BP,OAAO,MAAMmB,MAAM,GAAG,MAAM;AACxB,SAAO,CAAC9B,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AAEA,UAAMC,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;AAEA,QAAIE,OAAO,GAAG;AAAC,sBAAgB;AAAjB,KAAd;;AAEA,QAAIF,KAAJ,EAAW;AACTE,MAAAA,OAAO,CAAC,eAAD,CAAP,mBAAoCF,KAApC;AACD;;AAAA;AAED,WAAOG,KAAK,CAAC,eAAD,EAAkB;AAACD,MAAAA,OAAD;AAAUW,MAAAA,IAAI,EAAC,EAAf;AAAmBG,MAAAA,MAAM,EAAE;AAA3B,KAAlB,CAAL,CACFZ,IADE,CACGC,GAAG,IAAI;AACTI,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACC,MAAhB;;AACA,UAAID,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,eAAO;AAACA,UAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,UAAAA,IAAI,EAAE;AAA3B,SAAP;AACH,OAFD,MAEO,IAAIH,GAAG,CAACC,MAAJ,GAAa,GAAjB,EAAsB;AACzB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,IAAI,IAAI;AAC3B,iBAAO;AAACF,YAAAA,MAAM,EAAED,GAAG,CAACC,MAAb;AAAqBE,YAAAA;AAArB,WAAP;AACH,SAFM,CAAP;AAGH,OAJM,MAIA;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,cAAML,GAAN;AACH;AACJ,KAbE,EAcFD,IAdE,CAcGC,GAAG,IAAI;AACT,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpBT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAR;AACA,eAAOM,GAAG,CAACG,IAAX;AACH,OAHD,MAGO,IAAIH,GAAG,CAACC,MAAJ,KAAe,GAAf,IAAsBD,GAAG,CAACC,MAAJ,KAAe,GAAzC,EAA8C;AACjDT,QAAAA,QAAQ,CAAC;AAACE,UAAAA,IAAI,EAAE,sBAAP;AAA+BS,UAAAA,IAAI,EAAEH,GAAG,CAACG;AAAzC,SAAD,CAAR;AACA,cAAMH,GAAG,CAACG,IAAV;AACH;AACJ,KAtBE,CAAP;AAuBH,GAlCD;AAmCH,CApCM","sourcesContent":["export const loadUser = () => {\n  return (dispatch, getState) => {\n    dispatch({type: \"USER_LOADING\"});\n\n    const token = getState().auth.token;\n\n    let headers = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n    return fetch(\"/auth/user/\", {headers, })\n      .then(res => {\n        if (res.status < 500) {\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'USER_LOADED', user: res.data });\n          return res.data;\n        } else if (res.status >= 400 && res.status < 500) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}\n\nexport const deleteUser = (user) => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let body = JSON.stringify({user});\n    let headers = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n    return fetch(\"/auth/user/\", {headers,body,method:\"DELETE\" })\n      .then(res => {\n        if (res.status < 500) {\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'LOGOUT_SUCCESSFUL'});\n          return res.data;\n        } else if (res.status >= 400 && res.status < 500) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}\n\nexport const updateUser = (user,csrftoken) => {\n  return(dispatch,getState) => {\n    dispatch({type: 'USER_LOADING'});\n    const token = getState().auth.token;\n    let body = JSON.stringify({user});\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken,\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(\"/auth/update/\", {headers,body,method:\"PATCH\",mode:\"same-origin\"})\n      .then(res => {\n        if (res.status < 500) {\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'UPDATE_SUCCESSFUL', user: res.data });\n          return res.data;\n        } else if (res.status >= 400 && res.status < 500) {\n          dispatch({type: \"UPDATE_ERROR\", data: res.data});\n          throw res.data;\n        }\n      })\n\n  }\n}\n\nexport const login = (username, password) => {\n  return (dispatch, getState) => {\n    let headers = {\"Content-Type\": \"application/json\"};\n    let body = JSON.stringify({username, password});\n\n    return fetch(\"/auth/login/\", {headers, body, method: \"POST\"})\n      .then(res => {\n        if (res.status < 500) {\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'LOGIN_SUCCESSFUL', data: res.data });\n          return res.data;\n        } else if (res.status === 403 || res.status === 401) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        } else {\n          dispatch({type: \"LOGIN_FAILED\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}\n\n\nexport const register = (username,email,first_name,last_name,password,type) => {\n  return (dispatch, getState) => {\n    let headers = {\"Content-Type\": \"application/json\"};\n    let body = JSON.stringify({username,email,first_name,last_name,password,type});\n\n    return fetch(\"/auth/register/\", {headers, body, method: \"POST\"})\n      .then(res => {\n        if (res.status < 500) {\n          return res.json().then(data => {\n            return {status: res.status, data};\n          })\n        } else {\n          console.log(\"Server Error!\");\n          throw res;\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({type: 'REGISTRATION_SUCCESSFUL', data: res.data });\n          return res.data;\n        } else if (res.status === 403 || res.status === 401) {\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n          throw res.data;\n        } else {\n          dispatch({type: \"REGISTRATION_FAILED\", data: res.data});\n          throw res.data;\n        }\n      })\n  }\n}\n\nexport const logout = () => {\n    return (dispatch, getState) => {\n        dispatch({type: \"USER_LOADING\"});\n\n        const token = getState().auth.token;\n\n        let headers = {\"Content-Type\": \"application/json\",};\n\n        if (token) {\n          headers[\"Authorization\"] = `Token ${token}`;\n        };\n\n        return fetch(\"/auth/logout/\", {headers, body:\"\" ,method: \"POST\",})\n            .then(res => {\n                console.log(res.status);\n                if (res.status === 204) {\n                    return {status: res.status, data: {}};\n                } else if (res.status < 500) {\n                    return res.json().then(data => {\n                        return {status: res.status, data};\n                    })\n                } else {\n                    console.log(\"Server Error!\");\n                    throw res;\n                }\n            })\n            .then(res => {\n                if (res.status === 204) {\n                    dispatch({type: 'LOGOUT_SUCCESSFUL'});\n                    return res.data;\n                } else if (res.status === 403 || res.status === 401) {\n                    dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n                    throw res.data;\n                }\n            })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}