{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\nimport { FaTimes, FaPlus } from 'react-icons/fa';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\n\nclass Topic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      topic: \"\",\n      post: \"\",\n      reply_to: null\n    };\n\n    this.submitPost = e => {\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.post, this.state.reply_to).then(this.fetchPosts());\n    };\n  }\n\n  newPost(topic, category, text, reply_to) {\n    let query = this.state.query;\n    let body = JSON.stringify({\n      topic,\n      category,\n      text,\n      reply_to\n    });\n    headers[\"Authorization\"] = \"Token \".concat(this.props.token);\n    return fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      return res.json();\n    }).then(json => console.log(json)).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  fetchPosts() {\n    fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\")).then(response => {\n      return response.json();\n    }).then(responseData => {\n      return responseData;\n    }).then(json => {\n      this.setState({\n        posts: json.data\n      });\n      this.setState({\n        topic: json.topic\n      });\n    }).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  componentWillMount() {\n    this.fetchPosts();\n  }\n\n  render() {\n    console.log(this.state.post);\n    return React.createElement(\"div\", {\n      id: \"topic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"flex-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"forum-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"post-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"forum-h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.state.topic), React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(TextareaAutosize, {\n      id: \"new-post\",\n      onChange: e => this.setState({\n        post: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Create a post...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.submitPost,\n      className: \"post-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Post\"), \" \", React.createElement(\"button\", {\n      className: \"post-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Add Tag\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.state.posts.map((el, idx) => {\n      return React.createElement(\"div\", {\n        className: \"post\",\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(FaTimes, {\n        className: this.state.hidden ? 'hidden' : 'deleteSkill',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"desc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, el.text));\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Topic);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js"],"names":["React","Component","connect","Navbar","FaTimes","FaPlus","TextareaAutosize","headers","Topic","state","posts","topic","post","reply_to","submitPost","e","preventDefault","newPost","props","match","params","topic_id","category_id","then","fetchPosts","category","text","query","body","JSON","stringify","token","fetch","method","res","json","console","log","catch","err","response","responseData","setState","data","componentWillMount","render","target","value","map","el","idx","hidden","mapStateToProps","user","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\nimport {FaTimes,FaPlus} from 'react-icons/fa';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\n\n\nclass Topic extends Component{\n\n    state = {\n      posts:[],\n      topic:\"\",\n      post:\"\",\n      reply_to:null,\n\n    }\n\n    submitPost = (e) =>{\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,this.state.post,this.state.reply_to)\n      .then(this.fetchPosts())\n    }\n\n    newPost(topic,category,text,reply_to){\n      let query = this.state.query\n      let body = JSON.stringify({topic,category,text,reply_to});\n      headers[\"Authorization\"] = `Token ${this.props.token}`;\n      return fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"POST\"}).then(res => {return res.json();})\n        .then(json => console.log(json))\n        .catch(err => {console.log(\"fetch error\" + err)})\n    }\n\n    fetchPosts(){\n      fetch(`/api/post/${this.props.match.params.topic_id}/`)\n        .then(response => { return response.json();}).then(responseData => {return responseData;})\n        .then (json => {this.setState({posts: json.data}); this.setState({topic:json.topic})})\n        .catch(err => {console.log(\"fetch error\" + err);\n         });\n    }\n\n    componentWillMount(){\n      this.fetchPosts()\n    }\n\n\n  render(){\n    console.log(this.state.post)\n    return(\n    <div id=\"topic\">\n      <header>\n        <Navbar/>\n      </header>\n      <div className=\"flex-box\">\n        <div className=\"forum-body\">\n            <div id=\"post-list\">\n              <h1 className=\"forum-h1\">{this.state.topic}</h1>\n              <div className=\"post\">\n                <TextareaAutosize id=\"new-post\" onChange={e => this.setState({post: e.target.value})} maxLength=\"500\" minRows={1} maxRows={6}\n                 placeholder=\"Create a post...\"/>\n                <button onClick={this.submitPost} className=\"post-submit\">Post</button> <button className=\"post-submit\">Add Tag</button>\n              </div>\n              <div>\n                {this.state.posts.map((el,idx) => {\n                      return <div className=\"post\" key={idx}>\n                           <FaTimes className={this.state.hidden ? 'hidden':'deleteSkill'} />\n                           <p className=\"desc\">{el.text}</p>\n                      </div>\n                  })}\n              </div>\n            </div>\n\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      user: state.auth.user,\n      token:state.auth.token,\n    }\n}\n\nexport default connect(mapStateToProps)(Topic);\n"]},"metadata":{},"sourceType":"module"}