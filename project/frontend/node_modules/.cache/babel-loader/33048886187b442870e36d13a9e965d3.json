{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\nimport { Link } from 'react-router-dom';\nimport { FaComment, FaTrash } from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      meta: {},\n      hidden: true,\n      reply_hidden: true,\n      reply: \"\"\n    };\n\n    this.show = e => {\n      this.setState({\n        hidden: !this.state.hidden\n      });\n    };\n\n    this.showReply = e => {\n      this.setState({\n        reply_hidden: !this.state.reply_hidden\n      });\n    };\n\n    this.submitReply = id => {\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.reply, id, this.props.user.id);\n    };\n\n    this.deletePost = id => {\n      let body = JSON.stringify({\n        id\n      });\n      fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n        headers,\n        body,\n        method: \"DELETE\"\n      }).then(res => {\n        return res.json();\n      }).catch(err => {\n        console.log(\"fetch error\" + err);\n      });\n    };\n  }\n\n  newPost(topic, category, text, reply_to, user_id) {\n    let body = JSON.stringify({\n      topic,\n      category,\n      text,\n      reply_to,\n      user_id\n    });\n    headers[\"Authorization\"] = \"Token \".concat(this.props.token);\n    return fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      return res.json();\n    }).then(json => console.log(json)).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  componentWillMount() {\n    this.props.hi();\n  }\n\n  render() {\n    var comment = this.props.comment;\n    var meta = this.props.meta;\n    var match = this.props.match;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-avi\",\n      style: meta ? {\n        backgroundImage: \"url(\".concat(meta[comment.user_id]['avi_path'], \")\")\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" \", React.createElement(Link, {\n      to: \"/about/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"@\", meta ? meta[comment.user_id]['username'] : \"\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, comment.text), React.createElement(IconButton, {\n      onClick: this.showReply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(FaComment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      onClick: e => this.deletePost(comment.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(FaTrash, {\n      className: this.props.user.id !== comment.user_id ? \"hidden\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(TextareaAutosize, {\n      className: this.state.reply_hidden ? \"hidden\" : \"\",\n      id: \"new-post\",\n      onChange: e => this.setState({\n        reply: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      onClick: e => this.submitReply(comment.id),\n      className: this.state.reply_hidden ? \"hidden\" : \"reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Reply\"), React.createElement(\"p\", {\n      className: \"view-replies\",\n      onClick: this.show,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, comment.replies ? \"View \" + comment.replies.length + \" replies\" : \"\"))), React.createElement(\"div\", {\n      className: this.state.hidden ? \"hidden\" : \"replies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Comments, {\n      match: match,\n      meta: meta,\n      comments: comment.replies ? comment.replies : [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js"],"names":["React","Component","connect","Comments","TextareaAutosize","headers","Link","FaComment","FaTrash","IconButton","Comment","state","meta","hidden","reply_hidden","reply","show","e","setState","showReply","submitReply","id","newPost","props","match","params","topic_id","category_id","user","deletePost","body","JSON","stringify","fetch","method","then","res","json","catch","err","console","log","topic","category","text","reply_to","user_id","token","componentWillMount","hi","render","comment","backgroundImage","target","value","replies","length","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\nimport {Link} from 'react-router-dom';\nimport {FaComment,FaTrash} from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nclass Comment extends Component{\n\n  state = {\n    meta:{},\n    hidden:true,\n    reply_hidden:true,\n    reply:\"\",\n  }\n\n  show = (e) =>{\n    this.setState({hidden:!this.state.hidden})\n  }\n  showReply = (e) =>{\n    this.setState({reply_hidden:!this.state.reply_hidden})\n  }\n\n  submitReply =(id) =>{\n    this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,\n      this.state.reply,id,this.props.user.id)\n  }\n\n  newPost(topic,category,text,reply_to,user_id){\n    let body = JSON.stringify({topic,category,text,reply_to,user_id});\n    headers[\"Authorization\"] = `Token ${this.props.token}`;\n    return fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"POST\"}).then(res => {return res.json();})\n      .then(json => console.log(json))\n      .catch(err => {console.log(\"fetch error\" + err)})\n  }\n\n  deletePost= (id) => {\n    let body = JSON.stringify({id});\n    fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"DELETE\"})\n    .then(res => {return res.json();}).catch(err => {\n              console.log(\"fetch error\" + err)})\n  }\n\n  componentWillMount(){\n    this.props.hi()\n  }\n\n\n  render(){\n     var comment = this.props.comment;\n     var meta = this.props.meta;\n     var match = this.props.match;\n    return(\n      <div>\n        <div className=\"post\" >\n          <div className=\"post-avi\" style = {meta ? {backgroundImage: `url(${meta[comment.user_id]['avi_path']})`} : {}}></div>\n          <div className=\"text\">\n            <p> <Link to={\"/about/\"}>@{meta ? meta[comment.user_id]['username']:\"\"}</Link></p>\n            <p>{comment.text}</p>\n            <IconButton onClick={this.showReply}><FaComment/></IconButton>\n            <IconButton onClick={e=>this.deletePost(comment.id)}>\n              <FaTrash className={this.props.user.id !== comment.user_id ? \"hidden\" : \"\"}/>\n            </IconButton>\n            <TextareaAutosize  className={this.state.reply_hidden ? \"hidden\" : \"\"}id=\"new-post\" onChange={e => this.setState({reply: e.target.value})}\n             maxLength=\"500\" minRows={1} maxRows={6}\n             placeholder=\"Reply\"/>\n            <p onClick={e =>this.submitReply(comment.id)} className={this.state.reply_hidden ? \"hidden\" : \"reply\"}>Reply</p>\n            <p className=\"view-replies\" onClick={this.show}>{comment.replies ? \"View \"+comment.replies.length + \" replies\" : \"\"}</p>\n          </div>\n        </div>\n        <div className={this.state.hidden ? \"hidden\" : \"replies\"}>\n          <Comments match={match} meta={meta} comments={comment.replies ? comment.replies : []} />\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        user: state.auth.user,\n        token: state.auth.token,\n    }\n}\n\n\nexport default connect(mapStateToProps)(Comment);\n"]},"metadata":{},"sourceType":"module"}