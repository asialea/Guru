{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\nimport { Link } from 'react-router-dom';\nimport { FaComments, FaComment, FaTrash } from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      meta: {},\n      hidden: true,\n      reply_hidden: true,\n      post: \"\",\n      reply: \"\"\n    };\n\n    this.show = e => {\n      this.setState({\n        hidden: !this.state.hidden\n      });\n    };\n\n    this.showReply = e => {\n      this.setState({\n        reply_hidden: !this.state.reply_hidden\n      });\n    };\n\n    this.submitPost = e => {\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.post, null, this.props.user.id).then(this.fetchPosts());\n    };\n\n    this.submitReply = id => {\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.reply, id, this.props.user.id);\n    };\n  }\n\n  newPost(topic, category, text, reply_to, user_id) {\n    let body = JSON.stringify({\n      topic,\n      category,\n      text,\n      reply_to,\n      user_id\n    });\n    headers[\"Authorization\"] = \"Token \".concat(this.props.token);\n    return fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      return res.json();\n    }).then(json => console.log(json)).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  render() {\n    var comment = this.props.comment;\n    var meta = this.props.meta;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"post-avi\",\n      style: meta ? {\n        backgroundImage: \"url(\".concat(meta[comment.user_id]['avi_path'], \")\")\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \" \", React.createElement(Link, {\n      to: \"/about/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"@\", meta ? meta[comment.user_id]['username'] : \"\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, comment.text), React.createElement(IconButton, {\n      onClick: this.showReply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(FaComment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })), React.createElement(IconButton, {\n      onClick: this.showReply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(FaTrash, {\n      className: this.props.user.id !== comment.user_id ? \"hidden\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(TextareaAutosize, {\n      className: this.state.reply_hidden ? \"hidden\" : \"\",\n      id: \"new-post\",\n      onChange: e => this.setState({\n        reply: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      onClick: e => this.submitReply(comment.id),\n      className: this.state.reply_hidden ? \"hidden\" : \"reply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Reply\"), React.createElement(\"p\", {\n      className: \"view-replies\",\n      onClick: this.show,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, comment.replies ? \"View \" + comment.replies.length + \" replies\" : \"\"))), React.createElement(\"div\", {\n      className: this.state.hidden ? \"hidden\" : \"replies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Comments, {\n      meta: meta,\n      comments: comment.replies ? comment.replies : [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Comment.js"],"names":["React","Component","connect","Comments","TextareaAutosize","headers","Link","FaComments","FaComment","FaTrash","IconButton","Comment","state","meta","hidden","reply_hidden","post","reply","show","e","setState","showReply","submitPost","preventDefault","newPost","props","match","params","topic_id","category_id","user","id","then","fetchPosts","submitReply","topic","category","text","reply_to","user_id","body","JSON","stringify","token","fetch","method","res","json","console","log","catch","err","render","comment","backgroundImage","target","value","replies","length","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Comments from './Comments';\nimport '../static/Forum.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\nimport {Link} from 'react-router-dom';\nimport {FaComments,FaComment,FaTrash} from 'react-icons/fa';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nclass Comment extends Component{\n\n  state = {\n    meta:{},\n    hidden:true,\n    reply_hidden:true,\n    post:\"\",\n    reply:\"\",\n  }\n\n  show = (e) =>{\n    this.setState({hidden:!this.state.hidden})\n  }\n  showReply = (e) =>{\n    this.setState({reply_hidden:!this.state.reply_hidden})\n  }\n\n  submitPost = (e) =>{\n    e.preventDefault();\n    this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,this.state.post,null,this.props.user.id)\n    .then(this.fetchPosts())\n  }\n\n  submitReply =(id) =>{\n    this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,\n      this.state.reply,id,this.props.user.id)\n  }\n\n  newPost(topic,category,text,reply_to,user_id){\n    let body = JSON.stringify({topic,category,text,reply_to,user_id});\n    headers[\"Authorization\"] = `Token ${this.props.token}`;\n    return fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"POST\"}).then(res => {return res.json();})\n      .then(json => console.log(json))\n      .catch(err => {console.log(\"fetch error\" + err)})\n  }\n\n\n  render(){\n     var comment = this.props.comment;\n     var meta = this.props.meta;\n    return(\n      <div>\n      <div className=\"post\" >\n            <div className=\"post-avi\" style = {meta ? {backgroundImage: `url(${meta[comment.user_id]['avi_path']})`} : {}}></div>\n            <div className=\"text\">\n              <p> <Link to={\"/about/\"}>@{meta ? meta[comment.user_id]['username']:\"\"}</Link></p>\n              <p>{comment.text}</p>\n              <IconButton onClick={this.showReply}><FaComment/></IconButton>\n              <IconButton onClick={this.showReply}><FaTrash className={this.props.user.id !== comment.user_id ? \"hidden\" : \"\"}/></IconButton>\n              <TextareaAutosize  className={this.state.reply_hidden ? \"hidden\" : \"\"}id=\"new-post\" onChange={e => this.setState({reply: e.target.value})}\n               maxLength=\"500\" minRows={1} maxRows={6}\n               placeholder=\"Reply\"/>\n              <p onClick={e =>this.submitReply(comment.id)} className={this.state.reply_hidden ? \"hidden\" : \"reply\"}>Reply</p>\n              <p className=\"view-replies\" onClick={this.show}>{comment.replies ? \"View \"+comment.replies.length + \" replies\" : \"\"}</p>\n            </div>\n      </div>\n      <div className={this.state.hidden ? \"hidden\" : \"replies\"}>\n        <Comments meta={meta} comments={comment.replies ? comment.replies : []} />\n      </div>\n      </div>\n\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        user: state.auth.user,\n        token: state.auth.token,\n    }\n}\n\n\nexport default connect(mapStateToProps)(Comment);\n"]},"metadata":{},"sourceType":"module"}