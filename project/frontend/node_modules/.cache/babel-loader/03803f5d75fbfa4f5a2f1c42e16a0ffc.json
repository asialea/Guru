{"ast":null,"code":"var _jsxFileName = \"/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\n/*import {FaTimes} from 'react-icons/fa';*/\n\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { headers } from '../forms/global.js';\nimport { Link } from 'react-router-dom';\n\nclass Topic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      topic: \"\",\n      post: \"\",\n      reply: \"\"\n    };\n\n    this.submitPost = e => {\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.post, null, this.props.user.id).then(this.fetchPosts());\n    };\n\n    this.submitReply = id => {\n      this.newPost(this.props.match.params.topic_id, this.props.match.params.category_id, this.state.reply, id, this.props.user.id);\n    };\n\n    this.fetchReplies = id => {\n      fetch(\"/api/nested_replies/\".concat(id, \"/\")).then(response => {\n        return response.json();\n      }).then(responseData => {\n        return responseData;\n      }).then(json => {\n        console.log(json);\n      }).catch(err => {\n        console.log(\"fetch error\" + err);\n      });\n    };\n  }\n\n  newPost(topic, category, text, reply_to, user_id) {\n    let body = JSON.stringify({\n      topic,\n      category,\n      text,\n      reply_to,\n      user_id\n    });\n    headers[\"Authorization\"] = \"Token \".concat(this.props.token);\n    return fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\"), {\n      headers,\n      body,\n      method: \"POST\"\n    }).then(res => {\n      return res.json();\n    }).then(json => console.log(json)).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  fetchPosts() {\n    fetch(\"/api/post/\".concat(this.props.match.params.topic_id, \"/\")).then(response => {\n      return response.json();\n    }).then(responseData => {\n      return responseData;\n    }).then(json => {\n      this.setState({\n        posts: json.data\n      });\n      this.setState({\n        topic: json.topic\n      });\n    }).catch(err => {\n      console.log(\"fetch error\" + err);\n    });\n  }\n\n  componentWillMount() {\n    this.fetchPosts();\n  }\n\n  render() {\n    console.log(this.state.post);\n    return React.createElement(\"div\", {\n      id: \"topic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"flex-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"forum-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"post-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"forum-h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.topic), React.createElement(\"div\", {\n      className: \"new-post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(TextareaAutosize, {\n      id: \"new-post\",\n      onChange: e => this.setState({\n        post: e.target.value\n      }),\n      maxLength: \"500\",\n      minRows: 1,\n      maxRows: 6,\n      placeholder: \"Create a post...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.submitPost,\n      className: \"post-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Post\"), \" \", React.createElement(\"button\", {\n      className: \"post-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Add Tag\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.posts.map((el, idx) => {\n      return React.createElement(\"div\", {\n        className: \"post\",\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"post-avi\",\n        style: {\n          backgroundImage: \"url(\".concat(el.avi[0].avi_path, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \" \", React.createElement(Link, {\n        to: \"/about/\" + el.username[0].username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"@\", el.username[0].username)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, el.text), React.createElement(TextareaAutosize, {\n        id: \"new-post\",\n        onChange: e => this.setState({\n          reply: e.target.value\n        }),\n        maxLength: \"500\",\n        minRows: 1,\n        maxRows: 6,\n        placeholder: \"Reply\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        onClick: e => this.submitReply(el.id),\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Reply\"), \" \", React.createElement(\"p\", {\n        onClick: e => this.fetchReplies(el.id),\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Replies\")));\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.auth.user,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(Topic);","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/components/views/Topic.js"],"names":["React","Component","connect","Navbar","TextareaAutosize","headers","Link","Topic","state","posts","topic","post","reply","submitPost","e","preventDefault","newPost","props","match","params","topic_id","category_id","user","id","then","fetchPosts","submitReply","fetchReplies","fetch","response","json","responseData","console","log","catch","err","category","text","reply_to","user_id","body","JSON","stringify","token","method","res","setState","data","componentWillMount","render","target","value","map","el","idx","backgroundImage","avi","avi_path","username","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport '../static/Home.css';\nimport Navbar from './Navbar';\nimport '../static/Forum.css';\n/*import {FaTimes} from 'react-icons/fa';*/\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {headers} from '../forms/global.js'\nimport {Link} from 'react-router-dom';\n\nclass Topic extends Component{\n\n    state = {\n      posts:[],\n      topic:\"\",\n      post:\"\",\n      reply:\"\",\n    }\n\n    submitPost = (e) =>{\n      e.preventDefault();\n      this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,this.state.post,null,this.props.user.id)\n      .then(this.fetchPosts())\n    }\n\n    submitReply =(id) =>{\n      this.newPost(this.props.match.params.topic_id,this.props.match.params.category_id,\n        this.state.reply,id,this.props.user.id)\n    }\n\n    newPost(topic,category,text,reply_to,user_id){\n      let body = JSON.stringify({topic,category,text,reply_to,user_id});\n      headers[\"Authorization\"] = `Token ${this.props.token}`;\n      return fetch(`/api/post/${this.props.match.params.topic_id}/`, {headers,body,method:\"POST\"}).then(res => {return res.json();})\n        .then(json => console.log(json))\n        .catch(err => {console.log(\"fetch error\" + err)})\n    }\n\n    fetchPosts(){\n      fetch(`/api/post/${this.props.match.params.topic_id}/`)\n        .then(response => { return response.json();}).then(responseData => {return responseData;})\n        .then (json => {this.setState({posts: json.data}); this.setState({topic:json.topic})})\n        .catch(err => {console.log(\"fetch error\" + err);\n         });\n    }\n\n    fetchReplies=(id)=>{\n      fetch(`/api/nested_replies/${id}/`)\n        .then(response => { return response.json();}).then(responseData => {return responseData;})\n        .then (json => {console.log(json);})\n        .catch(err => {console.log(\"fetch error\" + err);\n         });\n    }\n\n\n    componentWillMount(){\n      this.fetchPosts()\n    }\n\n\n  render(){\n    console.log(this.state.post)\n    return(\n    <div id=\"topic\">\n      <header>\n        <Navbar/>\n      </header>\n      <div className=\"flex-box\">\n        <div className=\"forum-body\">\n            <div id=\"post-list\">\n              <h1 className=\"forum-h1\">{this.state.topic}</h1>\n              <div className=\"new-post\">\n                <TextareaAutosize id=\"new-post\" onChange={e => this.setState({post: e.target.value})} maxLength=\"500\" minRows={1} maxRows={6}\n                 placeholder=\"Create a post...\"/>\n                <button onClick={this.submitPost} className=\"post-submit\">Post</button> <button className=\"post-submit\">Add Tag</button>\n              </div>\n              <div>\n                {this.state.posts.map((el,idx) => {\n                      return <div className=\"post\" key={idx}>\n                            <div className=\"post-avi\" style = {{backgroundImage: `url(${el.avi[0].avi_path})`}}></div>\n                            <div className=\"text\">\n                              <p> <Link to={\"/about/\"+el.username[0].username}>@{el.username[0].username}</Link></p>\n                              <p>{el.text}</p>\n                              <TextareaAutosize id=\"new-post\" onChange={e => this.setState({reply: e.target.value})} maxLength=\"500\" minRows={1} maxRows={6}\n                               placeholder=\"Reply\"/>\n                              <p onClick={e =>this.submitReply(el.id)} className=\"\">Reply</p> <p onClick={e =>this.fetchReplies(el.id)} className=\"\">Replies</p>\n                            </div>\n\n                      </div>\n                  })}\n              </div>\n            </div>\n\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      user: state.auth.user,\n      token:state.auth.token,\n    }\n}\n\nexport default connect(mapStateToProps)(Topic);\n"]},"metadata":{},"sourceType":"module"}