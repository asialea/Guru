{"ast":null,"code":"export const addWork = (user_id, company, position, location, start, end, description, csrftoken) => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let body = JSON.stringify({\n      user_id,\n      company,\n      position,\n      location,\n      start,\n      end,\n      description\n    });\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"/api/work/\", {\n      headers,\n      body,\n      method: \"POST\",\n      mode: \"same-origin\"\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 201) {\n        return dispatch({\n          type: 'ADD_WORK',\n          note: res.data\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const fetchWork = () => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"api/work/\", {\n      headers\n    }).then(res => {\n      if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        return dispatch({\n          type: 'FETCH_WORK',\n          work: res.data\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};\nexport const deleteWork = (id, csrftoken) => {\n  return (dispatch, getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken\n    };\n    let body = JSON.stringify({\n      id\n    });\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"/api/work/\".concat(id, \"/\"), {\n      headers,\n      body,\n      method: \"DELETE\"\n    }).then(res => {\n      if (res.status === 204) {\n        return {\n          status: res.status,\n          data: {}\n        };\n      } else if (res.status < 500) {\n        return res.json().then(data => {\n          return {\n            status: res.status,\n            data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(res => {\n      if (res.status === 204) {\n        return dispatch({\n          type: 'DELETE_WORK',\n          id\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/asiataylor/Development/env1/django-drf-react/project/frontend/src/actions/work.js"],"names":["addWork","user_id","company","position","location","start","end","description","csrftoken","dispatch","getState","token","auth","body","JSON","stringify","headers","fetch","method","mode","then","res","status","json","data","console","log","type","note","fetchWork","work","deleteWork","id"],"mappings":"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","sourcesContent":["\n\nexport const addWork= (user_id,company,position,location,start,end,description,csrftoken) => {\n  return(dispatch,getState) => {\n    const token = getState().auth.token;\n    let body = JSON.stringify({user_id,company,position,location,start,end,description});\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken,\n    };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(\"/api/work/\", {headers,body,method:\"POST\",mode:\"same-origin\"})\n    .then(res => {\n              if (res.status < 500) {\n                  return res.json().then(data => {\n                      return {status: res.status, data};\n                  })\n              } else {\n                  console.log(\"Server Error!\");\n                  throw res;\n              }\n          })\n          .then(res => {\n              if (res.status === 201) {\n                  return dispatch({type: 'ADD_WORK', note: res.data});\n              } else if (res.status === 401 || res.status === 403) {\n                  dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n                  throw res.data;\n              }\n          })\n  }\n}\n\nexport const fetchWork = () => {\n  return(dispatch,getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n       };\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(\"api/work/\", {headers, })\n         .then(res => {\n             if (res.status < 500) {\n                 return res.json().then(data => {\n                     return {status: res.status, data};\n                 })\n             } else {\n                 console.log(\"Server Error!\");\n                 throw res;\n             }\n         })\n         .then(res => {\n             if (res.status === 200) {\n                 return dispatch({type: 'FETCH_WORK', work: res.data});\n             } else if (res.status === 401 || res.status === 403) {\n                 dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n                 throw res.data;\n             }\n         })\n  }\n}\n\n\nexport const deleteWork = (id,csrftoken) => {\n  return(dispatch,getState) => {\n    const token = getState().auth.token;\n    let headers = {\n      'Content-Type': 'application/json',\n      'X-CSRFToken': csrftoken,\n    };\n    let body = JSON.stringify({id});\n\n    if (token) {\n      headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return fetch(`/api/work/${id}/`, {headers,body,method:\"DELETE\"})\n    .then(res => {\n              if (res.status === 204) {\n                  return {status: res.status, data: {}};\n              } else if (res.status < 500) {\n                  return res.json().then(data => {\n                      return {status: res.status, data};\n                  })\n              } else {\n                  console.log(\"Server Error!\");\n                  throw res;\n              }\n          })\n          .then(res => {\n              if (res.status === 204) {\n                  return dispatch({type: 'DELETE_WORK', id});\n              } else if (res.status === 401 || res.status === 403) {\n                  dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n                  throw res.data;\n              }\n          })\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}